{"version":3,"sources":["battle/main.js","battle/units/stats.js","battle/factory/unit.js","battle/army.js","index.js"],"names":["FIELD_SIZE","CELL_VALUES","FIELD","BattleField","props","state","markUp","army","units","svgContainer","width","height","viewBox","path","_handleCellClick","bind","_findPath","side","this","forEach","unit","push","sort","a","b","speed","_setVirtualField","_setMovableCells","setState","currentUnit","_makeMarkUp","prevProps","prevState","currentPos","position","prevPos","x","y","_setUnitPositionInField","event","target","tagName","dataset","col","row","coord","currentCoord","unitState","unitXCoordinate","direction","size","battleSide","Object","assign","i","rowClass","j","cellClassName","key","data-row","data-col","className","d","firstInit","prevUnit","unitPos","unitPosX","unitPosY","bigUnitSecondX","prevUnitSecondX","coords","currentUnitPos","currentUnitSpeed","currentUnitSide","positionOffset","currentRow","oneSideDistance","xCoordinate","item","split","onClick","React","Component","UNITS","castle","spearman","attack","defence","damage","health","fly","range","archer","griffin","swordsman","monk","cavalryman","angel","UnitFactory","_instance","fraction","otherCfg","getInstance","ARMY","left","name","right","sideArmy","index","config","create","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c75ff465.chunk.js","sourcesContent":["import React from 'react';\r\nimport './field/main.css';\r\n\r\nconst FIELD_SIZE = {\r\n  COLUMNS: 15,\r\n  ROWS: 11\r\n}\r\n\r\nconst CELL_VALUES = {\r\n  EMPTY: 0,\r\n  UNIT: 1,\r\n  BIG_UNIT: 2,\r\n  WALL: 3,\r\n  MOVE: 4\r\n}\r\n\r\nlet FIELD = [];\r\n\r\nclass BattleField extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      markUp: [],\r\n      army: props.army,\r\n      units: []\r\n    };\r\n\r\n    this.svgContainer = {\r\n      width: '61',\r\n      height: '70',\r\n      viewBox: '0 0 60.6217782649107 70',\r\n      path: 'M30.31088913245535 0L60.6217782649107 17.5L60.6217782649107 52.5L30.31088913245535 70L0 52.5L0 17.5Z'\r\n    };\r\n\r\n    this._handleCellClick = this._handleCellClick.bind(this);\r\n    this._findPath = this._findPath.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const army = this.state.army;\r\n    const units = [];\r\n    for (let side in army) {\r\n      army[side].forEach((unit) => units.push(unit));\r\n    }\r\n    units.sort((a, b) => b.speed - a.speed);\r\n\r\n    this._setVirtualField(true);\r\n    this._setMovableCells(units[0]);\r\n    await this.setState({\r\n      units: units,\r\n      currentUnit: units[0],\r\n      markUp: this._makeMarkUp()});\r\n  }\r\n\r\n  async componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.currentUnit) {\r\n      const currentUnit = this.state.currentUnit;\r\n      const currentPos = currentUnit.position;\r\n      const prevPos = prevState.currentUnit.position;\r\n\r\n      if (currentPos.x !== prevPos.x || currentPos.y !== prevPos.y) {\r\n        this._setVirtualField();\r\n        this._setUnitPositionInField(currentUnit, prevState.currentUnit);\r\n        this._setMovableCells(currentUnit);\r\n        await this.setState({markUp: this._makeMarkUp()});\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обработчик клика по ячейке поля\r\n   * @param {Event} event \r\n   */\r\n  async _handleCellClick(event) {\r\n    if (event.target.tagName !== 'svg') {\r\n      return;\r\n    }\r\n\r\n    const dataset = event.target.dataset;\r\n    let x = +dataset.col;\r\n    const y = +dataset.row;\r\n    const row = FIELD[y-1];\r\n    const coord = row[x-1];\r\n    const currentCoord = this.state.currentUnit.position;\r\n\r\n    // игнорирование занятых клеток\r\n    if (coord === CELL_VALUES.EMPTY || (currentCoord.x === x && currentCoord.y === y)) {\r\n      return;\r\n    }\r\n\r\n    const unitState = this.state.currentUnit;\r\n    const unitXCoordinate = unitState.position.x;\r\n    const direction = unitXCoordinate - x > 0 ? 'left' : 'right';\r\n\r\n    // рассчет хода для большого юнита\r\n    if (unitState.size === CELL_VALUES.BIG_UNIT) {\r\n      if (unitState.battleSide === 'left' && direction === 'right') {\r\n        if (row[x] !== CELL_VALUES.MOVE) {\r\n          x--;\r\n        }\r\n      } else if (unitState.battleSide === 'right' && direction === 'left') {\r\n        if (row[x - CELL_VALUES.BIG_UNIT] !== CELL_VALUES.MOVE) {\r\n          x++;\r\n        }\r\n      }\r\n    }\r\n\r\n    const currentUnit = Object.assign({}, this.state.currentUnit, {position: {x, y}, direction});\r\n\r\n    await this.setState({currentUnit});\r\n\r\n    this._findPath(x, y);\r\n  }\r\n\r\n  /**\r\n   * Поиск пути\r\n   * @param {string} x - начальная координата по оси x \r\n   * @param {string} y - начальная координата по оси y \r\n   */\r\n  _findPath(x, y) {\r\n    // const reachebleCells = [];\r\n  }\r\n\r\n  /**\r\n   * Создание разметки поля боя, виртуальной и физической\r\n   */\r\n  _makeMarkUp() {\r\n    const markUp = [];\r\n\r\n    for (let i = 1; i <= FIELD_SIZE.ROWS; i++) {\r\n      const row = [];\r\n      const rowClass = `battlefield_row battlefield_row--${i % 2 === 0 ? 'even' : 'odd'}`;\r\n\r\n      for (let j = 1; j <= FIELD_SIZE.COLUMNS; j++) {\r\n        let cellClassName = \"battlefield_cell\";\r\n        \r\n        switch (FIELD[i-1][j-1]) {\r\n          case CELL_VALUES.UNIT:\r\n          case CELL_VALUES.BIG_UNIT:\r\n            cellClassName += ` ${cellClassName}--currentUnit`;\r\n            break;\r\n          case CELL_VALUES.MOVE:\r\n            cellClassName += ` ${cellClassName}--movable`;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n\r\n        row.push(<svg key={`cell_${i}-${j}`}\r\n                      data-row={i}\r\n                      data-col={j}\r\n                      className={cellClassName}\r\n                      width={this.svgContainer.width}\r\n                      height={this.svgContainer.height}\r\n                      viewBox={this.svgContainer.viewBox}>\r\n                        <path d={this.svgContainer.path}></path>\r\n                  </svg>);\r\n      }\r\n      markUp.push(<div key={`row_${i}`} className={rowClass}>{row}</div>);\r\n    };\r\n    \r\n    return  markUp;\r\n  }\r\n\r\n  /**\r\n   * Заполнение виртуального поля\r\n   */\r\n  _setVirtualField(firstInit) {\r\n    const army = this.state.army;\r\n\r\n    for (let i = 0; i < FIELD_SIZE.ROWS; i++) {\r\n      if (firstInit) {\r\n        FIELD.push([]);\r\n      }\r\n\r\n      for (let j = 0; j < FIELD_SIZE.COLUMNS; j++) {\r\n        if (firstInit) {\r\n          for (let side in army) {\r\n            const unit = army[side][i];\r\n            \r\n            if (i === unit?.position.y - 1 && j === unit?.position.x - 1) {\r\n              this._setUnitPositionInField(unit);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!FIELD[i][j] || FIELD[i][j] === CELL_VALUES.MOVE) {\r\n          FIELD[i][j] = CELL_VALUES.EMPTY;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Установка позиции юнита в виртуальном поле\r\n   * @param {*} unit - текущее состояние юнита\r\n   * @param {*} prevUnit - предыдущее состояние юнита\r\n   */\r\n  _setUnitPositionInField(unit, prevUnit) {\r\n    const unitPos = unit.position;\r\n    const unitPosX = unitPos.y - 1;\r\n    const unitPosY = unitPos.x - 1;\r\n    FIELD[unitPosX][unitPosY] = unit.size;\r\n\r\n    if (prevUnit) {\r\n      FIELD[prevUnit.position.y - 1][prevUnit.position.x - 1] = CELL_VALUES.EMPTY;\r\n    }\r\n      \r\n    /**\r\n     * если юнит большой, то надо заполнять +1 ячейку под него\r\n     * при этом надо учитывать направление и сторону юнита на поле\r\n     * и размещать доп. клетку слева или справа в зависимости от стороны\r\n     */\r\n    if (unit.size === CELL_VALUES.BIG_UNIT) {\r\n      const bigUnitSecondX = unit.battleSide === 'left' ? unitPosY + 1 : unitPosY - 1;\r\n      FIELD[unitPosX][bigUnitSecondX] = unit.size;\r\n\r\n      if (prevUnit) {\r\n        const prevUnitSecondX = unit.battleSide === 'left' ? prevUnit.position.x + 1 : prevUnit.position.x - CELL_VALUES.BIG_UNIT;\r\n        FIELD[prevUnit.position.y - 1][prevUnitSecondX] = CELL_VALUES.EMPTY;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Отображение клеток, доступных для перемещения\r\n   */\r\n  _setMovableCells(unit) {\r\n    let coords = [];\r\n    const currentUnitPos = unit.position;\r\n    const currentUnitSpeed = unit.speed;\r\n    const currentUnitSide = unit.battleSide;\r\n\r\n    let positionOffset = 0;\r\n\r\n    for (let j = 0; j <= currentUnitSpeed; j++) {\r\n      const currentRow = currentUnitPos.y + j;\r\n\r\n      // сдвиг начала доступных для перемещения клеток в строке\r\n      // так как поле сделано из гексов, то каждая вторая строка сдвигается на одну клетку относительно самой крайней клетки\r\n      if (currentRow !== currentUnitPos.y && currentRow % 2 !== 0) {\r\n        positionOffset++;\r\n      }\r\n\r\n      // рассчет возможных клеток для передвижения вокруг юнита с учетом его скорости и размера\r\n      // если большой юнит смотрит вправо, то надо сместить координаты хода вправо на одну клетку и увеличить дальность хода на 1\r\n      for (let i = 0; i < currentUnitSpeed * 2 + unit.size - j; i++) {\r\n        const oneSideDistance = currentUnitSpeed + (currentUnitSide === 'left' ? unit.size - 1 : 0);\r\n        const xCoordinate = (i > oneSideDistance ? currentUnitPos.x - i + oneSideDistance : currentUnitPos.x + i) - positionOffset;\r\n        coords.push(`${xCoordinate} ${currentRow}`);\r\n        \r\n        if (currentRow !== currentRow - j * 2) {\r\n          coords.push(`${xCoordinate} ${currentRow - j * 2}`);\r\n        }\r\n      }\r\n    }\r\n\r\n    // обрезка невозможных для хода координат\r\n    coords.forEach((item) => {\r\n      const y = +item.split(' ')[1];\r\n      const x = +item.split(' ')[0];\r\n      const isCorrectCoordinate = x > 0 && x <= FIELD_SIZE.COLUMNS && y > 0 && y <= FIELD_SIZE.ROWS;\r\n\r\n      if (isCorrectCoordinate && FIELD[y - 1][x - 1] === CELL_VALUES.EMPTY) {\r\n        FIELD[y - 1][x - 1] = CELL_VALUES.MOVE;\r\n      }\r\n    });\r\n\r\n    return FIELD;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"battleField_main\" onClick={this._handleCellClick}>\r\n        {this.state.markUp}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BattleField;\r\n","export const UNITS = {\r\n    castle: {\r\n        spearman: {\r\n            attack: 4,\r\n            defence: 5,\r\n            damage: [1, 3],\r\n            health: 10,\r\n            speed: 4,\r\n            size: 1,\r\n            fly: false,\r\n            range: false\r\n        },\r\n        archer: {\r\n            attack: 6,\r\n            defence: 3,\r\n            damage: [2, 3],\r\n            health: 10,\r\n            speed: 4,\r\n            size: 1,\r\n            fly: false,\r\n            range: true\r\n        },\r\n        griffin: {\r\n            attack: 8,\r\n            defence: 8,\r\n            damage: [3, 6],\r\n            health: 25,\r\n            speed: 6,\r\n            size: 2,\r\n            fly: true,\r\n            range: false\r\n        },\r\n        swordsman: {\r\n            attack: 10,\r\n            defence: 12,\r\n            damage: [6, 9],\r\n            health: 35,\r\n            speed: 5,\r\n            size: 1,\r\n            fly: false,\r\n            range: false\r\n        },\r\n        monk: {\r\n            attack: 12,\r\n            defence: 7,\r\n            damage: [10, 12],\r\n            health: 30,\r\n            speed: 5,\r\n            size: 1,\r\n            fly: false,\r\n            range: true\r\n        },\r\n        cavalryman: {\r\n            attack: 15,\r\n            defence: 15,\r\n            damage: [15, 25],\r\n            health: 100,\r\n            speed: 7,\r\n            size: 2,\r\n            fly: false,\r\n            range: false\r\n        },\r\n        angel: {\r\n            attack: 20,\r\n            defence: 20,\r\n            damage: [50, 50],\r\n            health: 200,\r\n            speed: 12,\r\n            size: 1,\r\n            fly: true,\r\n            range: false\r\n        }\r\n    }\r\n};","import {UNITS} from '../units/stats';\r\n\r\nclass UnitFactory {\r\n    constructor() {\r\n        UnitFactory._instance = this;\r\n    }\r\n\r\n    create(fraction, unit, otherCfg) {\r\n        return {...UNITS[fraction][unit], ...otherCfg};\r\n    }\r\n    \r\n    getInstance() {\r\n        return UnitFactory._instance;\r\n    }\r\n}\r\n\r\nexport default new UnitFactory().getInstance();","export const ARMY = {\r\n    left: {\r\n        fraction: 'castle',\r\n        units: [\r\n            {\r\n                name: 'swordsman',\r\n                size: 50\r\n            },\r\n            {\r\n                name: 'griffin',\r\n                size: 30\r\n            }\r\n        ]\r\n    },\r\n    right: {\r\n        fraction: 'castle',\r\n        units: [\r\n            {\r\n                name: 'cavalryman',\r\n                size: 40\r\n            },\r\n        ]\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport BattleField from './battle/main';\nimport UnitFactory from './battle/factory/unit';\nimport {ARMY} from './battle/army';\n\nconst army = {\n    left: [],\n    right: []\n};\n\nfor (let side in ARMY) {\n    const sideArmy = ARMY[side];\n    sideArmy.units.forEach((unit, index) => {\n        const config = {\n            position: {\n                x: side === 'left' ? 1 : 15,\n                y: index + 1\n            },\n            direction: side === 'left' ? 'right' : 'left',\n            battleSide: side\n        }\n        army[side].push(UnitFactory.create(sideArmy.fraction, unit.name, config));\n    });\n}\n\nReactDOM.render(<BattleField army={army}/>, document.getElementById('root'));\n"],"sourceRoot":""}