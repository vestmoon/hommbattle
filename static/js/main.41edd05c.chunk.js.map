{"version":3,"sources":["battle/main.js","index.js"],"names":["FIELD_SIZE","CELL_VALUES","BattleField","props","state","markUp","field","currentUnit","position","x","y","direction","battleSide","size","speed","svgContainer","width","height","viewBox","path","_handleCellClick","bind","_findPath","event","dataset","target","col","row","this","unitState","unitXCoordinate","Math","abs","Object","assign","setState","virtualMarkup","coords","virtualField","currentUnitPos","currentUnitSpeed","positionOffset","j","currentRow","i","oneSideDistance","xCoordinate","push","forEach","item","split","_setMovableCells","unitSizeCount","_setVirtualField","rowClass","cellClassName","key","onClick","data-row","data-col","className","d","_makeMarkUp","prevProps","prevState","currentPos","prevPos","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.41edd05c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './field/main.css';\r\n\r\nconst FIELD_SIZE = {\r\n  COLUMNS: 15,\r\n  ROWS: 11\r\n}\r\n\r\nconst CELL_VALUES = {\r\n  EMPTY: 0,\r\n  UNIT: 1,\r\n  WALL: 2,\r\n  MOVE: 4\r\n}\r\n\r\nclass BattleField extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      markUp: [],\r\n      field: [],\r\n      currentUnit: {\r\n        position: {\r\n          x: 15,\r\n          y: 1\r\n        },\r\n        direction: 'left',\r\n        battleSide: 'right',\r\n        size: 2,\r\n        speed: 3\r\n      }\r\n    };\r\n\r\n    this.svgContainer = {\r\n      width: '61',\r\n      height: '70',\r\n      viewBox: '0 0 60.6217782649107 70',\r\n      path: 'M30.31088913245535 0L60.6217782649107 17.5L60.6217782649107 52.5L30.31088913245535 70L0 52.5L0 17.5Z'\r\n    };\r\n\r\n    this._handleCellClick = this._handleCellClick.bind(this);\r\n    this._findPath = this._findPath.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Обработчик клика по ячейке поля\r\n   * @param {Event} event \r\n   */\r\n  _handleCellClick(event) {\r\n    const dataset = event.target.dataset;\r\n    let x = +dataset.col;\r\n    const y = +dataset.row;\r\n\r\n    if (!this.state.field[y-1][x-1]) {\r\n      return;\r\n    }\r\n\r\n    const unitState = this.state.currentUnit;\r\n    const unitXCoordinate = unitState.position.x;\r\n    const direction = unitXCoordinate - x > 0 ? 'left' : 'right';\r\n    // const isFieldEndCoord = (x !== 1 || x !== FIELD_SIZE.COLUMNS);\r\n\r\n    if (unitState.size > 1) {\r\n      if (unitState.battleSide === direction && x !== 1 && Math.abs(x - unitXCoordinate) > 1) {\r\n        x--;\r\n      }\r\n    }\r\n\r\n    const currentUnit = Object.assign({}, this.state.currentUnit, {position: {x, y}, direction});\r\n    \r\n    this._findPath(x, y);\r\n\r\n    this.setState({\r\n      currentUnit\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Поиск пути\r\n   * @param {string} x - начальная координата по оси x \r\n   * @param {string} y - начальная координата по оси y \r\n   */\r\n  _findPath(x, y) {\r\n    // const reachebleCells = [];\r\n  }\r\n\r\n  /**\r\n   * Отображение клеток, доступных для перемещения\r\n   * @param {Array} virtualMarkup \r\n   */\r\n  _setMovableCells(virtualMarkup) {\r\n    let coords = [];\r\n    const virtualField = virtualMarkup;\r\n    const currentUnit = this.state.currentUnit;\r\n    const currentUnitPos = currentUnit.position;\r\n    const currentUnitSpeed = currentUnit.speed;\r\n\r\n    let positionOffset = 0;\r\n\r\n    for (let j = 0; j <= currentUnitSpeed; j++) {\r\n      const currentRow = currentUnitPos.y + j;\r\n\r\n      // сдвиг начала доступных для перемещения клеток в строке\r\n      // так как поле сделано из гексов, то каждая вторая строка сдвигается на одну клетку относительно самой крайней клетки\r\n      if (currentRow !== currentUnitPos.y && currentRow % 2 !== 0) {\r\n        positionOffset++;\r\n      }\r\n\r\n      for (let i = 0; i < currentUnitSpeed * 2 + currentUnit.size - j; i++) {\r\n        const oneSideDistance = currentUnitSpeed + currentUnit.size - 1;\r\n        const xCoordinate = (i > oneSideDistance ? currentUnitPos.x - i + oneSideDistance : currentUnitPos.x + i) - positionOffset;\r\n        coords.push(`${xCoordinate} ${currentRow}`);\r\n        \r\n        if (currentRow !== currentRow - j * 2) {\r\n          coords.push(`${xCoordinate} ${currentRow - j * 2}`);\r\n        }\r\n      }\r\n    }\r\n\r\n    coords.forEach((item) => {\r\n      const y = +item.split(' ')[1];\r\n      const x = +item.split(' ')[0];\r\n      const isCorrectCoordinate = x > 0 && x <= FIELD_SIZE.COLUMNS && y > 0 && y <= FIELD_SIZE.ROWS;\r\n\r\n      if (isCorrectCoordinate && virtualField[y - 1][x - 1] === CELL_VALUES.EMPTY) {\r\n        virtualField[y - 1][x - 1] = CELL_VALUES.MOVE;\r\n      }\r\n    });\r\n\r\n    return virtualField;\r\n  }\r\n\r\n  /**\r\n   * Заполнение виртуального поля\r\n   * @param {Array} virtualMarkup \r\n   */\r\n  _setVirtualField() {\r\n    let field = [];\r\n    const currentUnitPos = this.state.currentUnit.position;\r\n\r\n    for (let i = 0; i < FIELD_SIZE.ROWS; i++) {\r\n      field.push([]);\r\n\r\n      for (let j = 0; j < FIELD_SIZE.COLUMNS; j++) {\r\n        if (i === currentUnitPos.y - 1 && j === currentUnitPos.x - 1) {\r\n          field[i].push(CELL_VALUES.UNIT);\r\n        } else {\r\n          field[i].push(CELL_VALUES.EMPTY);\r\n        }\r\n      }\r\n    }\r\n\r\n    field = this._setMovableCells(field);\r\n\r\n    return field;\r\n  }\r\n\r\n  /**\r\n   * Создание разметки поля боя, виртуальной и физической\r\n   */\r\n  _makeMarkUp() {\r\n    const markUp = [];\r\n    let unitSizeCount = 0;\r\n    const field = this._setVirtualField();\r\n\r\n    for (let i = 1; i <= FIELD_SIZE.ROWS; i++) {\r\n      const row = [];\r\n      const rowClass = `battlefield_row battlefield_row--${i % 2 === 0 ? 'even' : 'odd'}`;\r\n\r\n      for (let j = 1; j <= FIELD_SIZE.COLUMNS; j++) {\r\n        let cellClassName = \"battlefield_cell\";\r\n        \r\n        switch (field[i-1][j-1]) {\r\n          case 1:\r\n            cellClassName += ` ${cellClassName}--currentUnit`;\r\n            unitSizeCount++;\r\n            if (unitSizeCount < this.state.currentUnit.size) {\r\n              field[i-1][j] = 1;\r\n            }\r\n            break;\r\n          case 4:\r\n            cellClassName += ` ${cellClassName}--movable`;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n\r\n        row.push(<svg key={`cell_${i}-${j}`}\r\n                      onClick={this._handleCellClick}\r\n                      data-row={i}\r\n                      data-col={j}\r\n                      className={cellClassName}\r\n                      width={this.svgContainer.width}\r\n                      height={this.svgContainer.height}\r\n                      viewBox={this.svgContainer.viewBox}>\r\n                        <path d={this.svgContainer.path}></path>\r\n                  </svg>);\r\n      }\r\n      markUp.push(<div key={`row_${i}`} className={rowClass}>{row}</div>);\r\n      unitSizeCount = 0;\r\n    };\r\n    \r\n    return  {markUp, field};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState(this._makeMarkUp());\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const currentPos = this.state.currentUnit.position;\r\n    const prevPos = prevState.currentUnit.position;\r\n\r\n    if (currentPos.x !== prevPos.x || currentPos.y !== prevPos.y) {\r\n      this.setState(this._makeMarkUp());\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"battleField_main\">\r\n        {this.state.markUp}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BattleField;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport BattleField from './battle/main';\n\nReactDOM.render(<BattleField />, document.getElementById('root'));\n"],"sourceRoot":""}